<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1">
  <display-name>JSPBookProject</display-name>
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  <!-- 
  	JSP 시큐리티 web.xml 설정
  	1. 시큐리티 역할 설정하는 방법
  		<security-role>
  			<role-name>role1</role-name>	// 역할 이름
  		</security-role>
  	2. 시큐리티 제약 사항 설정하기
  		<security-constraint>
  			// 웹 자원에 대한 접근 설정
  			<web-resource-collection></web-resource-collection>
  			//웹 자원에 접근 할 수 있는 인증된 사용자 설정
  			<auth-constraint></auth-constraint>
  			// 데이터 전송 시 데이터 보호를 설정
  			<user-data-constraint></user-data-constraint>
  		</security-constraint>
   		
   		2.1 웹 자원에 대한 접근 설정
   			<web-resource-collection>
   				// 웹 자원의 이름을 설정하며 생략할 수 있다.
   				<web-resource-name></web-resource-name>
   				// 접근 제한을 요청할 때 URL 목록을 설정
   				<url-pattern></url-pattern>
   				// HTTP 메소드를 설정(GET, POST)
   				<http-method></http-method>
   			</web-resource-collection>
   
   		2.2 웹 자원에 접근할 수 있는 인증된 사용자 설정
   			- auth-constraint를 설정하지 않으면 웹 서버는 사용자 인증을 요구하지 않고 사용자의 요청을
   			승인합니다.
   			<auth-constraint>
   				<description></description>		// 설명
   				// 반드시 tomcat-users.xml에 등록된 역할과 사용자여야 한다.
   				<role-name></role-name>
   			</auth-constraint>
   		2.3 클라이언트와 서버 간에 데이터를 전송할 때 데이터를 보호하는 방법을 설정
   			- NONE : 기본 값으로 데이터를 보호하지 않을 때
   			- INTEGRAL : 전송 중 데이터가 변경되지 않았음을 보장(데이터 무결성)
   			- CONFIDENTIAL : 전송 중 데이터를 아무도 훔쳐보지 않았음을 보장(기밀성)
   			<user-data-constraint>
   				<transport-guarantee>NONE</transport-guarantee>
   			</user-data-constraint>
   		3. 시큐리티 인증 설정하기
   			<login-config>
   				// 웹 자원에 대한 인증 처리 방식 설정
   				<auth-method>FORM</auth-method>
   				// 웹 자원에 접근할 수 있는 인증된 사용자 설정
   				<realm-name></realm-name>
   				// 데이터 전송 시 데이터 보호를 설정
   				<form-login-config></form-login-config>
   			</login-config>
   		3.1 웹 애플리케이션의 인증 처리 기법을 설정하는 요소 
   			- BASIC : 웹 자원을 보호하는 간단하고 일반적인 방법
   			- DIGEST : 암호화 메커니즘을 이용하여 전송, 많이 사용하지 않음
   			- FORM : [대표적] 일반적인 폼 페이지를 이용하여 로그인 정보를 서버에 전송하는 방식
   					암호화되지 않은 로그인 정보를 그대로 전송
   					** FORM 기반 인증시에는 별도 form 처리가 필요합니다.
   			- CLIENT-CERT : 클라이언트가 인증서를 가지고 공인 키 인증 방식을 사용하여 로그인하는 방식
   							클라이언트가 인증서를 가지고 있어야만 로그인되므로 비즈니스 환경에서만 적용
   			<auth-method>FORM</auth-method>
   			
   		3.2 기본 인증의 영역 이름을 설정
   			- FORM 기반 인증이나 다른 인증 방법에 필요하지 않기 때문에 아무런 영향을 미치지 않지만,
   			데이터를 문서화하는데 일반적으로 사용합니다
   			<realm-name></realm-name>
   			
   		3.3 인증 처리를 위한 로그인 및 오류 페이지를 설정
   			- auth-method 요소가 FORM 기반 인증 처리 기법으로 설정되었을때 사용합니다
   			<form-login-config>
   				<form-login-page>/ch10/login.jsp<form-login-page>
   				<form-error-page>/ch10/login_failed.jsp<form-error-page>
   			</form-login-config>
   		
   -->
   
  <!-- ch10 기본 인증 처리 방법으로 보안 처리하기 -->
<!--   <security-role> -->
<!--   	<role-name>role1</role-name> -->
<!--   </security-role> -->
<!--   <security-constraint> -->
<!--   	<web-resource-collection> -->
<!--   		<web-resource-name>JSPBookProject</web-resource-name> -->
<!--   		<url-pattern>/ch10/security01.jsp</url-pattern> -->
<!-- 		<http-method>GET</http-method> -->
<!--   	</web-resource-collection> -->
<!--   	<auth-constraint> -->
<!--   		<description>security01</description> -->
<!--   		<role-name>role1</role-name> -->
<!--   	</auth-constraint> -->
<!--   </security-constraint> -->
<!--   <login-config> -->
<!--   	<auth-method>BASIC</auth-method> -->
<!--   </login-config> -->
  <!-- ch10 기본 인증 처리 방법으로 보안 처리하기 End -->
  
  <!-- ch10 폼 기반 인증 처리 방법으로 보안 처리하기  -->
<!--   <security-role> -->
<!--   	<role-name>role1</role-name> -->
<!--   </security-role> -->
<!--   <security-constraint> -->
<!--   	<web-resource-collection> -->
<!--   		<web-resource-name>JSPBookProject</web-resource-name> -->
<!--   		<url-pattern>/ch10/security01.jsp</url-pattern> -->
<!--   		<http-method>GET</http-method> -->
<!--   	</web-resource-collection> -->
<!--   	<auth-constraint> -->
<!--   		<description>security01</description> -->
<!--   		<role-name>role1</role-name> -->
<!--   	</auth-constraint>	 -->
<!--   </security-constraint> -->
<!--   <login-config> -->
<!--   	<auth-method>FORM</auth-method> -->
<!--   	<form-login-config> -->
<!--   		<form-login-page>/ch10/login.jsp</form-login-page> -->
<!--   		<form-error-page>/ch10/login_failed.jsp</form-error-page> -->
<!--   	</form-login-config> -->
<!--   </login-config> -->
  <!-- ch10 폼 기반 인증 처리 방법으로 보안 처리하기 End -->
  
  <!-- ch10 프로그래밍적 시큐리티 처리 -->
<!--   <security-role> -->
<!--   	<role-name>role1</role-name> -->
<!--   </security-role> -->
<!--   <security-constraint> -->
<!--   	<web-resource-collection> -->
<!--   		<web-resource-name>JSPBookProject</web-resource-name> -->
<!--   		<url-pattern>/ch10/security02.jsp</url-pattern> -->
<!--   		<http-method>GET</http-method> -->
<!--   	</web-resource-collection> -->
<!--   	<auth-constraint> -->
<!--   		<description>security02</description> -->
<!--   		<role-name>role1</role-name> -->
<!--   	</auth-constraint> -->
<!--   </security-constraint> -->
<!--   <login-config> -->
<!--   	<auth-method>FORM</auth-method> -->
<!--   	<form-login-config> -->
<!--   		<form-login-page>/ch10/login.jsp</form-login-page> -->
<!--   		<form-error-page>/ch10/login_failed.jsp</form-error-page> -->
<!--   	</form-login-config> -->
<!--   </login-config> -->
  <!-- ch10 프로그래밍적 시큐리티 처리 End-->
  
  <error-page>
  	<error-code>500</error-code>
  	<location>/ch11/errorCode_error.jsp</location>
  </error-page>
  
  <error-page>
  	<exception-type>java.lang.Exception</exception-type>
  	<location>/ch11/exceptionType_error.jsp</location>
  </error-page>
  
		 <!-- ch11 test 시큐리티 처리 start-->
	<security-role>
		<role-name>admin</role-name>
	</security-role>
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>JSPBookProject</web-resource-name>
			<url-pattern>/ch11/test/boardForm.jsp</url-pattern>
			<http-method>GET</http-method>
		</web-resource-collection>
		<auth-constraint>
			<description></description>
			<role-name>admin</role-name>
		</auth-constraint>
	</security-constraint>
	<login-config>
		<auth-method>FORM</auth-method>
		<form-login-config>
			<form-login-page>/ch11/test/loginSecurity.jsp</form-login-page>
			<form-error-page>/ch11/test/loginFailed.jsp</form-error-page>
		</form-login-config>
	</login-config>
  		 <!-- ch11 test 시큐리티 처리 end-->
  	<filter>
  		<filter-name>Filter01</filter-name>
  		<filter-class>kr.or.ddit.filter.AuthenFilter</filter-class>
  	</filter>
  	<filter-mapping>
  		<filter-name>Filter01</filter-name>
  		<url-pattern>/ch12/filter01_process.jsp</url-pattern>
  	</filter-mapping>
  	
  	<filter>
  		<filter-name>Filter02</filter-name>
  		<filter-class>kr.or.ddit.filter.InitParamFilter</filter-class>
  		<init-param>
  			<param-name>param1</param-name>
  			<param-value>admin</param-value>
  		</init-param>
  		<init-param>
  			<param-name>param2</param-name>
  			<param-value>1234</param-value>
  		</init-param>
  	</filter>
  	<filter-mapping>
  		<filter-name>Filter02</filter-name>
  		<url-pattern>/ch12/filter02_process.jsp</url-pattern>
  	</filter-mapping>
  	
  	<filter>
  		<filter-name>Filter02_2</filter-name>
  		<filter-class>kr.or.ddit.filter.LogFileFilter</filter-class>
  		<init-param>
  			<param-name>filename</param-name>
  			<param-value>C:\\logs\monitor.log</param-value>
  		</init-param>
  	</filter>
  	<filter-mapping>
  		<filter-name>Filter02_2</filter-name>
  		<url-pattern>/ch12/filter02_process.jsp</url-pattern>
  	</filter-mapping>
</web-app>